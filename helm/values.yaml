global:
  environment: production
  imagePullPolicy: IfNotPresent

image:
  repository: docker.io/oluwaseun1511/ip-reverser-app
  tag: "latest"
  pullPolicy: IfNotPresent

deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  container:
    port: 3001
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 256Mi
    livenessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 30
      periodSeconds: 30
    readinessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 10
      periodSeconds: 10
    startupProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 30

env:
  NODE_ENV: production
  PORT: 3001
  CORS_ORIGIN: "*"
  DATABASE_URL:
    secretName: ip-reverser-secrets
    secretKey: database-url

service:
  type: LoadBalancer
  port: 80
  targetPort: 3001

ingress:
  enabled: true
  className: "nginx"
  hosts:
    - host: api.your-domain.com
      paths:
        - path: /
          pathType: Prefix

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

configMap:
  data:
    NODE_ENV: "production"
    PORT: "3001"
    CORS_ORIGIN: "*"

env: {}   # no extra env vars here


secrets:
  database_url: "postgresql://postgres:password@ip-reverser-app-prod-postgresql.apps-prod.svc.cluster.local:5432/ipreverser"

postgresql:
  enabled: true
  auth:
    postgresPassword: "your-postgres-password"
    username: "postgres"
    password: "password"
    database: "ipreverser"
  primary:
    persistence:
      enabled: true
      size: 8Gi

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels:
    app: ip-reverser-app

podDisruptionBudget:
  enabled: true
  minAvailable: 1
